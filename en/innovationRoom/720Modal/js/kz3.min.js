var hdrCubeRenderTarget = null;
var texture;
var scene = new THREE.Scene();

var loader1 = new THREE.TextureLoader();
loader1.setPath(window.baseFilesPath || './');

var normal = loader1.load('map/faxian.jpg');
normal.wrapS = THREE.RepeatWrapping;
normal.wrapT = THREE.RepeatWrapping;
normal.repeat.set(1, 1);

var texLoader = new THREE.RGBELoader();
texLoader.setDataType(THREE.UnsignedByteType);
texLoader.setPath(window.baseFilesPath || './');
texLoader.load('map/109.hdr', function (_0x51081d) {
    hdrCubeRenderTarget = pmremGenerator.fromEquirectangular(_0x51081d);
    _0x51081d.dispose();
    pmremGenerator.dispose();
    texture = hdrCubeRenderTarget.texture;
    var _0x4f1d96 = new THREE.FBXLoader();
    _0x4f1d96.setPath(window.baseFilesPath || './');
    _0x4f1d96.load('kz3.fbx', function (_0x34e32a) {
        _0x34e32a.position.set(0, 0, 0);
        let _0xc7a62 = /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? 0.5 : 1;
        _0x34e32a.scale.multiplyScalar(_0xc7a62);
        hei = _0x34e32a.getObjectByName('hei');
        hui = _0x34e32a.getObjectByName('hui');
        lv = _0x34e32a.getObjectByName('lv');
        mat_hei = new THREE.MeshPhysicalMaterial({
            'color': 0,
            'roughness': 0.3,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0.1,
            'side': 2
        });
        mat_hui = new THREE.MeshPhysicalMaterial({
            'color': 592137,
            'roughness': 0.4,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0,
            'side': 2
        });
        mat_lv = new THREE.MeshPhysicalMaterial({
            'color': 12895428,
            'roughness': 0.4,
            'metalness': 1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0.1,
            'side': 2
        });
        hei.material = mat_hei;
        hui.material = mat_hui;
        lv.material = mat_lv;
        scene.add(_0x34e32a);
        document.getElementById('loading').style.display = 'none';
    }, _0x34a619 => {
        console.log(_0x34a619);
        document.getElementById('load').innerText = (_0x34a619.loaded / _0x34a619.total * 100).toFixed() + '%';
    });
});

var ambient = new THREE.AmbientLight(5526612, 1);
scene.add(ambient);

var directionalLight1 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight1.position.set(-1600, 1600, 200);
scene.add(directionalLight1);

var directionalLight2 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight2.position.set(200, 1600, 1600);
scene.add(directionalLight2);

var width = window.innerWidth;
var height = window.innerHeight;

var camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 100, 100000);
camera.position.set(0, 0, 25000);
camera.lookAt(scene.position);

var renderer = new THREE.WebGLRenderer({
    'antialias': true,
    'alpha': true
});

renderer.setSize(width, height);

document.body.appendChild(renderer.domElement);
renderer.gammaOutput = true;
renderer.gammaFactor = 2.2;

var pmremGenerator = new THREE.PMREMGenerator(renderer);
pmremGenerator.compileEquirectangularShader();

var controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

function render() {
    renderer.render(scene, camera);
    requestAnimationFrame(render);
    controls.update();
}

render();