var hdrCubeRenderTarget = null;
var texture;
var scene = new THREE.Scene();

var loader1 = new THREE.TextureLoader();
loader1.setPath(window.baseFilesPath || './');

var normal = loader1.load('map/UV网格.jpg');
normal.wrapS = THREE.RepeatWrapping;
normal.wrapT = THREE.RepeatWrapping;
normal.repeat.set(1, 1);

var normal2 = loader1.load('map/e2cfdd1ed2e5e6bfb50033747474550.png');
normal2.wrapS = THREE.RepeatWrapping;
normal2.wrapT = THREE.RepeatWrapping;
normal2.repeat.set(1, 1);

var texLoader = new THREE.RGBELoader();
texLoader.setDataType(THREE.UnsignedByteType);
texLoader.setPath(window.baseFilesPath || './');
texLoader.load('map/109.hdr', function (_0x30fec6) {
    hdrCubeRenderTarget = pmremGenerator.fromEquirectangular(_0x30fec6);
    _0x30fec6.dispose();
    pmremGenerator.dispose();
    texture = hdrCubeRenderTarget.texture;
    var _0x3a92bf = new THREE.FBXLoader();
    _0x3a92bf.setPath(window.baseFilesPath || './');
    _0x3a92bf.load('kz2.fbx', function (_0x354261) {
        _0x354261.position.set(0, 0, 0);
        let _0x5e7f24 = /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? 0.5 : 1;
        _0x354261.scale.multiplyScalar(_0x5e7f24);
        bi = _0x354261.getObjectByName('bi');
        pai = _0x354261.getObjectByName('pai');
        lv = _0x354261.getObjectByName('lv');
        lvhejin = _0x354261.getObjectByName('lvhejin');
        mat_pai = new THREE.MeshPhysicalMaterial({
            'map': pai.material.map,
            'roughness': 0.8,
            'metalness': 0.1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'transparent': true,
            'side': 2
        });
        mat_lv = new THREE.MeshPhysicalMaterial({
            'color': 12632256,
            'roughness': 1,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0,
            'normalMap': normal,
            'normalScale': new THREE.Vector2(1, 1),
            'side': 2
        });
        mat_bi = new THREE.MeshPhysicalMaterial({
            'map': bi.material.map,
            'roughness': 1,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0
        });
        mat_lvhejin = new THREE.MeshPhysicalMaterial({
            'color': 11645361,
            'roughness': 0.1,
            'metalness': 1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0.1
        });
        bi.material = mat_bi;
        pai.material = mat_pai;
        lv.material = mat_lv;
        lvhejin.material = mat_lvhejin;
        scene.add(_0x354261);
        document.getElementById('loading').style.display = 'none';
    }, _0x5bc217 => {
        document.getElementById('load').innerText = (_0x5bc217.loaded / _0x5bc217.total * 100).toFixed() + '%';
    });
});

var ambient = new THREE.AmbientLight(5526612, 1);
scene.add(ambient);

var directionalLight1 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight1.position.set(-1600, 1600, 800);
scene.add(directionalLight1);

var directionalLight2 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight2.position.set(1600, 1600, -800);
scene.add(directionalLight2);

var width = window.innerWidth;
var height = window.innerHeight;

var camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 100, 100000);
camera.position.set(0, 0, 9000);
camera.lookAt(scene.position);

var renderer = new THREE.WebGLRenderer({
    'antialias': true,
    'alpha': true
});
renderer.setSize(width, height);
document.body.appendChild(renderer.domElement);
renderer.gammaOutput = true;
renderer.gammaFactor = 2.2;

var pmremGenerator = new THREE.PMREMGenerator(renderer);
pmremGenerator.compileEquirectangularShader();

var controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

function render() {
    renderer.render(scene, camera);
    requestAnimationFrame(render);
    controls.update();
}

render();