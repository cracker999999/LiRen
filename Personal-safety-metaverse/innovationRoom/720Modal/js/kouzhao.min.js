var mesh;
var mixer;
var hdrCubeRenderTarget = null;
var texture;
var scene = new THREE.Scene();
var loader1 = new THREE.TextureLoader();
loader1.setPath(window.baseFilesPath || './');

var normal = loader1.load('map/fx2.jpg');
normal.wrapS = THREE.RepeatWrapping;
normal.wrapT = THREE.RepeatWrapping;
normal.repeat.set(1, 1);

var texLoader = new THREE.RGBELoader();
texLoader.setDataType(THREE.UnsignedByteType);
texLoader.setPath(window.baseFilesPath || './');
texLoader.load('map/109.hdr', function (tex) {
    hdrCubeRenderTarget = pmremGenerator.fromEquirectangular(tex);
    tex.dispose();
    pmremGenerator.dispose();
    texture = hdrCubeRenderTarget.texture;

    var fbxLoader = new THREE.FBXLoader();
    fbxLoader.setPath(window.baseFilesPath || './');
    fbxLoader.load('kouzhao.fbx', function (fbx) {
        fbx.position.set(0, 0, 0);
        let scaleFactor = /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? 0.5 : 1;
        fbx.scale.multiplyScalar(scaleFactor);

        mesh = fbx;

        hei = fbx.getObjectByName('hei');
        hui = fbx.getObjectByName('hui');
        h = fbx.getObjectByName('h');
        lan = fbx.getObjectByName('lan');
        you = fbx.getObjectByName('you');
        lv = fbx.getObjectByName('lv');
        zuo = fbx.getObjectByName('zuo');
        boli = fbx.getObjectByName('boli');
        zheng = fbx.getObjectByName('zheng');
        zi = fbx.getObjectByName('zi');
        xia = fbx.getObjectByName('xia');
        qian = fbx.getObjectByName('qian');

        mat_hei = new THREE.MeshPhysicalMaterial({
            'color': 0,
            'roughness': 0.4,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0.01,
            'side': 2
        });
        mat_h = new THREE.MeshPhysicalMaterial({
            'color': 0,
            'roughness': 0.4,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'clearcoat': 0.01,
            'side': 2
        });
        mat_hui = new THREE.MeshPhysicalMaterial({
            'color': 1710618,
            'roughness': 0.4,
            'metalness': 0,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 0
        });
        mat_lan = new THREE.MeshPhysicalMaterial({
            'color': 0,
            'metalness': 0,
            'roughness': 0.1,
            'transparent': true,
            'envMap': texture,
            'opacity': 0.6,
            'reflectivity': 0.5
        });
        mat_you = new THREE.MeshPhysicalMaterial({
            'map': you.material.map,
            'roughness': 0.8,
            'metalness': 0.1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'transparent': true
        });
        mat_boli = new THREE.MeshPhysicalMaterial({
            'map': boli.material.map,
            'metalness': 0,
            'roughness': 0.1,
            'transparent': false,
            'envMap': texture,
            'opacity': 0.5,
            'reflectivity': 1,
            'color': 6905879
        });
        mat_zi = new THREE.MeshPhysicalMaterial({
            'map': zi.material.map,
            'metalness': 0,
            'roughness': 0.1,
            'transparent': false,
            'envMap': texture,
            'opacity': 0.5,
            'reflectivity': 1,
            'color': 6905879
        });
        mat_lv = new THREE.MeshPhysicalMaterial({
            'color': 16777215,
            'roughness': 0.4,
            'metalness': 1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'clearcoat': 1,
            'side': 2
        });
        mat_zuo = new THREE.MeshPhysicalMaterial({
            'map': zuo.material.map,
            'roughness': 0.8,
            'metalness': 0.1,
            'fog': false,
            'envMapIntensity': 1,
            'envMap': texture,
            'transparent': true
        });
        mat_xia = new THREE.MeshPhysicalMaterial({
            'map': xia.material.map,
            'roughness': 1,
            'metalness': 0.8,
            'fog': false,
            'envMapIntensity': 1,
            'transparent': true,
            'envMap': texture,
            'clearcoat': 0,
            'side': 2
        });
        mat_qian = new THREE.MeshPhysicalMaterial({
            'map': qian.material.map,
            'color': 0,
            'roughness': 0.1,
            'metalness': 1,
            'fog': false,
            'envMapIntensity': 1,
            'transparent': true,
            'envMap': texture,
            'clearcoat': 0,
            'side': 2
        });

        hei.material = mat_hei;
        hui.material = mat_hui;
        h.material = mat_h;
        lan.material = mat_lan;
        you.material = mat_you;
        lv.material = mat_lv;
        zuo.material = mat_zuo;
        boli.material = mat_boli;
        zi.material = mat_zi;
        xia.material = mat_xia;
        qian.material = mat_qian;

        scene.add(fbx);

        initColorDict();

        document.getElementById('loading').style.display = 'none';
        document.getElementById('loaderOver').style.display = 'block';
        document.getElementById('colorBar').style.display = 'block';
    }, progressEvt => {
        document.getElementById('load').innerText = (progressEvt.loaded / progressEvt.total * 100).toFixed() + '%';
    });
});

let originColorDict = new Map();
function initColorDict()
{
    scene.traverse((obj) =>{
        
        if (obj.isMesh) {
            // console.log("0x"+obj.material.color.getHexString());
            originColorDict.set(obj.name, "0x"+obj.material.color.getHexString());
        }
    });

    // console.log(originColorDict);
}

function resetAllColor()
{
    originColorDict.forEach((value, key) => {
        var mesh = scene.getObjectByName(key);
        mesh.material.color.setHex(value);
        // mesh.material.needsUpdate = true;
    });
}

function updateAllColor(color){
    originColorDict.forEach((value, key) => {
        var mesh = scene.getObjectByName(key);
        mesh.material.color.setHex(color);
        // mesh.material.needsUpdate = true;
    });
}

function red(){
    // updateAllColor(0xff0000);
    var mesh = scene.getObjectByName("hui");
    if(!mesh) return;
    mesh.material.color.setHex(0xff0000);
    // mesh.material.needsUpdate = true;
}

function green(){
    var mesh = scene.getObjectByName("hei");
    if(!mesh) return;
    mesh.material.color.setHex(0x00ff00);
    // mesh.material.needsUpdate = true;
}

function blue() {
    var mesh = scene.getObjectByName("lan");
    if(!mesh) return;
    mesh.material.color.setHex(0x0000ff);
    // mesh.material.needsUpdate = true;
}

function pos() {
    mixer = new THREE.AnimationMixer(mesh);
    AnimationAction = mixer.clipAction(mesh.animations[0]);
    AnimationAction.timeScale = 1;
    AnimationAction.loop = THREE.LoopOnce;
    AnimationAction.clampWhenFinished = true;
    AnimationAction.play();
}

function bos() {
    mixer = new THREE.AnimationMixer(mesh);
    AnimationAction = mixer.clipAction(mesh.animations[1]);
    AnimationAction.timeScale = 1;
    AnimationAction.loop = THREE.LoopOnce;
    AnimationAction.clampWhenFinished = true;
    AnimationAction.time = 1.66;
    AnimationAction.play();
}

var ambient = new THREE.AmbientLight(5526612, 1);
scene.add(ambient);

var directionalLight1 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight1.position.set(-1600, 1600, 200);
scene.add(directionalLight1);

var directionalLight2 = new THREE.DirectionalLight(11513775, 0.5);
directionalLight2.position.set(200, 1600, 1600);
scene.add(directionalLight2);

var width = window.innerWidth;
var height = window.innerHeight;

var camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 100, 1000000);
camera.position.set(0, 0, 10000);
camera.lookAt(scene.position);

var renderer = new THREE.WebGLRenderer({
    'antialias': true,
    'alpha': true
});
renderer.setSize(width, height);
document.body.appendChild(renderer.domElement);
renderer.gammaOutput = true;
renderer.gammaFactor = 2.2;

var pmremGenerator = new THREE.PMREMGenerator(renderer);
pmremGenerator.compileEquirectangularShader();

var controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.enableDamping = true;

var clock = new THREE.Clock();

function render() {
    renderer.render(scene, camera);
    requestAnimationFrame(render);
    controls.update();
    if (mixer) {
        mixer.update(clock.getDelta());
    }
}

render();