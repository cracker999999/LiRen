//https://www.dejs.vip/2obfuscator


var mesh;
var mixer;
var hdrCubeRenderTarget = null;
var texture;
var scene = new THREE.Scene();
var loader = new THREE.TextureLoader();
loader.setPath(window.baseFilesPath || './');

var normal = loader.load('map/光照.png');
normal.flipY = true;
normal.wrapS = THREE.RepeatWrapping;
normal.wrapT = THREE.RepeatWrapping;
normal.repeat.set(1, 1);

var texLoader = new THREE.RGBELoader();
texLoader.setDataType(THREE.UnsignedByteType);
texLoader.setPath(window.baseFilesPath || './');
texLoader.load('map/109.hdr', function (tex) {
    hdrCubeRenderTarget = pmremGenerator.fromEquirectangular(tex);
    tex.dispose();
    pmremGenerator.dispose();
    texture = hdrCubeRenderTarget.texture;

    var gltfLoader = new THREE.GLTFLoader();
    gltfLoader.setPath(window.baseFilesPath || './');

    const draco = new THREE.DRACOLoader();
    draco.setDecoderPath('./js/draco/');
    gltfLoader.setDRACOLoader(draco);
    gltfLoader.load('scene.glb', function (gltf) {
        gltf = gltf.scene;
        gltf.position.set(60, 24, 0);
        scene.add(gltf);

        let scaleFactor = /(iPhone|iPad|iPod|iOS|Android)/i.test(navigator.userAgent) ? 0.5 : 1;
        gltf.scale.multiplyScalar(scaleFactor);
        
        document.getElementById('loading').style.display = 'none';
        document.getElementById('loaderOver').style.display = 'block';
        document.getElementById('colorBar').style.display = 'block';
    }, progressEvt => {
        document.getElementById('load').innerText = (progressEvt.loaded / progressEvt.total * 100).toFixed() + '%';
    });
});

function donghua(objectName, moveDistance, animateToNewPos = true) {
    if (!animateToNewPos && !mesh.oldPos)
        return;

    mesh = scene.getObjectByName(objectName);
    var currPos = mesh.position.clone();
    
    if (!mesh.oldPos) {
        mesh.oldPos = mesh.position.clone();
        mesh.newPos = mesh.position.clone().add(currPos.set(moveDistance, 0, 0));
    }

    var tween = new TWEEN.Tween(mesh.position);
    tween.to(animateToNewPos ? mesh.newPos : mesh.oldPos, 1000);
    tween.start();
}

//拆解
function pos() {
    donghua('立方体_5', -50, true);
    donghua('立方体_7', -50, true);
    donghua('立方体_3', 50, true);
    donghua('立方体_6', 50, true);
}

//组合
function bos() {
    donghua('立方体_6', -50, false);
    donghua('立方体_3', -50, false);
    donghua('立方体_5', 50, false);
    donghua('立方体_7', 50, false);
}

var width = window.innerWidth;
var height = window.innerHeight;
var camera = new THREE.PerspectiveCamera(40, window.innerWidth / window.innerHeight, 10, 1000000);
camera.lookAt(scene.position);

var renderer = new THREE.WebGLRenderer({
    'antialias': true,
    'alpha': true
});

renderer.setSize(width, height);
document.body.appendChild(renderer.domElement);
renderer.gammaOutput = true;
renderer.gammaFactor = 2.2;

var pmremGenerator = new THREE.PMREMGenerator(renderer);
pmremGenerator.compileEquirectangularShader();

var controls = new THREE.OrbitControls(camera, renderer.domElement);
controls.target.set(59.26147475945824, 55.88615189082385, -30.479719301148734);
controls.object.position.set(24.0555452775575, 72.5390994913941, 352.06251928626904);
window.controls = controls;
controls.enableDamping = true;

var clock = new THREE.Clock();

function render() {
    renderer.render(scene, camera);
    requestAnimationFrame(render);
    controls.update();
    TWEEN.update();
    if (mixer) {
        mixer.update(clock.getDelta());
    }
}

render();